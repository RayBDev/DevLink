# Additional Scalars
scalar DateTime
scalar URL

# Standard Types
type Likes {
  user: ID!
}

type Comments {
  user: ID!
  text: String!
  name: String!
  avatar: URL
}

type Post {
  user: ID!
  text: String!
  name: String
  avatar: URL
  likes: [Likes]
  comments: [Comments]
  createdAt: DateTime
  updatedAt: DateTime
}

# Input Types
input PostIdInput {
  post_id: ID!
}

input UserIdInput {
  user_id: ID!
}

"""
Post input requires manually setting the name and avatar instead of populating by user id. Allows post to persist if user is deleted.
"""
input PostInput {
  user: ID!
  text: String!
  name: String
  avatar: URL
}

"""
Likes require manually setting the name and avatar instead of populating by user id. Allows likes to persist if user is deleted.
"""
input LikeInput {
  post_id: ID!
  name: String!
  avatar: URL
}

"""
Comments require manually setting the name and avatar instead of populating by user id. Allows comment to persist if user is deleted.
"""
input CommentInput {
  post_id: ID!
  text: String!
  name: String!
  avatar: URL
}

input CommentIdInput {
  post_id: ID!
  comment_id: ID!
}

# Output Types

type ReturnPostResult {
  result: String!
}

# Query Types
type Query {
  """
  Public query that returns all posts
  """
  allPosts: [Post!]!
  """
  Public query that returns a post based on the post id provided
  """
  postById(input: PostIdInput!): Post!
  """
  Public query that returns all posts of a user based on the user id provided
  """
  postsByUser(input: UserIdInput!): [Post!]!
}

# Mutation Types
type Mutation {
  """
  Create a post based on the logged in user and the post details provided. Returns the post.
  """
  createPost(input: PostInput!): Post!
  """
  Delete a post when the logged in user provides the post id and the user is the post creator. Returns 'result: success'.
  """
  deletePost(input: PostIdInput!): ReturnPostResult!
  """
  A logged in user can like a post based on the post id provided. Returns the entire post.
  """
  likePost(input: LikeInput!): Post!
  """
  A logged in user can unlike a previously liked post based on the id provided. Returns the entire post.
  """
  unlikePost(input: PostIdInput!): Post!
  """
  A logged in user can comment on a post based on the post id and comment details provided. Returns the entire post.
  """
  commentOnPost(input: CommentInput!): Post!
  """
  A logged in user can delete a comment they previously created based on the comment id. Returns the entire post.
  """
  deleteComment(input: CommentIdInput!): Post!
}
