# Additional Scalars
scalar Date
scalar URL

# Standard Types
type Experience {
  title: String!
  company: String!
  location: String
  from: Date!
  to: Date
  current: Boolean!
  description: String
}

type Education {
  school: String!
  degree: String!
  fieldofstudy: String!
  from: Date!
  to: Date
  current: Boolean!
  description: String
}

type Social {
  youtube: URL
  twitter: URL
  facebook: URL
  linkedin: URL
  instagram: URL
}

type UserNameAvatar {
  name: String
  avatar: URL
}

type ProfileWithUser {
  user: UserNameAvatar
  handle: String!
  company: String
  website: URL
  location: String
  status: String!
  skills: [String]
  bio: String
  githubusername: String
  experience: [Experience]
  education: [Education]
  social: Social
}

type Profile {
  user: ID!
  handle: String!
  company: String
  website: URL
  location: String
  status: String!
  skills: [String]
  bio: String
  githubusername: String
  experience: [Experience]
  education: [Education]
  social: Social
}

# Input Types
input ProfileInput {
  handle: String!
  company: String
  website: String
  location: String
  status: String!
  skills: String!
  bio: String
  githubusername: String
  youtube: String
  twitter: String
  facebook: String
  linkedin: String
  instagram: String
}

input ExperienceInput {
  title: String!
  company: String!
  location: String
  from: Date!
  to: Date
  current: Boolean!
  description: String
}

input EducationInput {
  school: String!
  degree: String!
  fieldofstudy: String!
  from: Date!
  to: Date
  current: Boolean!
  description: String
}

input SocialInput {
  youtube: URL
  twitter: URL
  facebook: URL
  linkedin: URL
  instagram: URL
}

input HandleInput {
  handle: String!
}

input UserIdInput {
  user_id: ID!
}

input ExperienceIdInput {
  exp_id: ID!
}

input EducationIdInput {
  edu_id: ID!
}

# Output Types

type ReturnResult {
  result: String!
}

# Queries
type Query {
  profile: ProfileWithUser!
  allProfiles: [ProfileWithUser!]!
  profileByHandle(input: HandleInput!): ProfileWithUser!
  profileById(input: UserIdInput!): ProfileWithUser!
}

type Mutation {
  editProfile(input: ProfileInput!): Profile!
  editExperience(input: ExperienceInput!): Profile!
  editEducation(input: EducationInput!): Profile!
  deleteExperience(input: ExperienceIdInput!): Profile!
  deleteEducation(input: EducationIdInput!): Profile!
  deleteProfile: ReturnResult!
}
